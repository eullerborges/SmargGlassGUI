// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol_Commands.proto

#ifndef PROTOBUF_Protocol_5fCommands_2eproto__INCLUDED
#define PROTOBUF_Protocol_5fCommands_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Protocol_5fCommands_2eproto();
void protobuf_AssignDesc_Protocol_5fCommands_2eproto();
void protobuf_ShutdownFile_Protocol_5fCommands_2eproto();

class Nack;
class Ack;
class BasicCommand;

enum NackReasons {
  INVALID_MSG_TYPE = 0,
  INVALID_DATA = 1,
  DECODE_ERROR = 2
};
bool NackReasons_IsValid(int value);
const NackReasons NackReasons_MIN = INVALID_MSG_TYPE;
const NackReasons NackReasons_MAX = DECODE_ERROR;
const int NackReasons_ARRAYSIZE = NackReasons_MAX + 1;

const ::google::protobuf::EnumDescriptor* NackReasons_descriptor();
inline const ::std::string& NackReasons_Name(NackReasons value) {
  return ::google::protobuf::internal::NameOfEnum(
    NackReasons_descriptor(), value);
}
inline bool NackReasons_Parse(
    const ::std::string& name, NackReasons* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NackReasons>(
    NackReasons_descriptor(), name, value);
}
// ===================================================================

class Nack : public ::google::protobuf::Message {
 public:
  Nack();
  virtual ~Nack();

  Nack(const Nack& from);

  inline Nack& operator=(const Nack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Nack& default_instance();

  void Swap(Nack* other);

  // implements Message ----------------------------------------------

  Nack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Nack& from);
  void MergeFrom(const Nack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 commandID = 1;
  inline bool has_commandid() const;
  inline void clear_commandid();
  static const int kCommandIDFieldNumber = 1;
  inline ::google::protobuf::uint32 commandid() const;
  inline void set_commandid(::google::protobuf::uint32 value);

  // required .NackReasons nackReason = 2;
  inline bool has_nackreason() const;
  inline void clear_nackreason();
  static const int kNackReasonFieldNumber = 2;
  inline ::NackReasons nackreason() const;
  inline void set_nackreason(::NackReasons value);

  // @@protoc_insertion_point(class_scope:Nack)
 private:
  inline void set_has_commandid();
  inline void clear_has_commandid();
  inline void set_has_nackreason();
  inline void clear_has_nackreason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 commandid_;
  int nackreason_;
  friend void  protobuf_AddDesc_Protocol_5fCommands_2eproto();
  friend void protobuf_AssignDesc_Protocol_5fCommands_2eproto();
  friend void protobuf_ShutdownFile_Protocol_5fCommands_2eproto();

  void InitAsDefaultInstance();
  static Nack* default_instance_;
};
// -------------------------------------------------------------------

class Ack : public ::google::protobuf::Message {
 public:
  Ack();
  virtual ~Ack();

  Ack(const Ack& from);

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ack& default_instance();

  void Swap(Ack* other);

  // implements Message ----------------------------------------------

  Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 commandID = 1;
  inline bool has_commandid() const;
  inline void clear_commandid();
  static const int kCommandIDFieldNumber = 1;
  inline ::google::protobuf::uint32 commandid() const;
  inline void set_commandid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Ack)
 private:
  inline void set_has_commandid();
  inline void clear_has_commandid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 commandid_;
  friend void  protobuf_AddDesc_Protocol_5fCommands_2eproto();
  friend void protobuf_AssignDesc_Protocol_5fCommands_2eproto();
  friend void protobuf_ShutdownFile_Protocol_5fCommands_2eproto();

  void InitAsDefaultInstance();
  static Ack* default_instance_;
};
// -------------------------------------------------------------------

class BasicCommand : public ::google::protobuf::Message {
 public:
  BasicCommand();
  virtual ~BasicCommand();

  BasicCommand(const BasicCommand& from);

  inline BasicCommand& operator=(const BasicCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicCommand& default_instance();

  void Swap(BasicCommand* other);

  // implements Message ----------------------------------------------

  BasicCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BasicCommand& from);
  void MergeFrom(const BasicCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 commandID = 1;
  inline bool has_commandid() const;
  inline void clear_commandid();
  static const int kCommandIDFieldNumber = 1;
  inline ::google::protobuf::uint32 commandid() const;
  inline void set_commandid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BasicCommand)
 private:
  inline void set_has_commandid();
  inline void clear_has_commandid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 commandid_;
  friend void  protobuf_AddDesc_Protocol_5fCommands_2eproto();
  friend void protobuf_AssignDesc_Protocol_5fCommands_2eproto();
  friend void protobuf_ShutdownFile_Protocol_5fCommands_2eproto();

  void InitAsDefaultInstance();
  static BasicCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// Nack

// required uint32 commandID = 1;
inline bool Nack::has_commandid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Nack::set_has_commandid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Nack::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Nack::clear_commandid() {
  commandid_ = 0u;
  clear_has_commandid();
}
inline ::google::protobuf::uint32 Nack::commandid() const {
  // @@protoc_insertion_point(field_get:Nack.commandID)
  return commandid_;
}
inline void Nack::set_commandid(::google::protobuf::uint32 value) {
  set_has_commandid();
  commandid_ = value;
  // @@protoc_insertion_point(field_set:Nack.commandID)
}

// required .NackReasons nackReason = 2;
inline bool Nack::has_nackreason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Nack::set_has_nackreason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Nack::clear_has_nackreason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Nack::clear_nackreason() {
  nackreason_ = 0;
  clear_has_nackreason();
}
inline ::NackReasons Nack::nackreason() const {
  // @@protoc_insertion_point(field_get:Nack.nackReason)
  return static_cast< ::NackReasons >(nackreason_);
}
inline void Nack::set_nackreason(::NackReasons value) {
  assert(::NackReasons_IsValid(value));
  set_has_nackreason();
  nackreason_ = value;
  // @@protoc_insertion_point(field_set:Nack.nackReason)
}

// -------------------------------------------------------------------

// Ack

// required uint32 commandID = 1;
inline bool Ack::has_commandid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ack::set_has_commandid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ack::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ack::clear_commandid() {
  commandid_ = 0u;
  clear_has_commandid();
}
inline ::google::protobuf::uint32 Ack::commandid() const {
  // @@protoc_insertion_point(field_get:Ack.commandID)
  return commandid_;
}
inline void Ack::set_commandid(::google::protobuf::uint32 value) {
  set_has_commandid();
  commandid_ = value;
  // @@protoc_insertion_point(field_set:Ack.commandID)
}

// -------------------------------------------------------------------

// BasicCommand

// required uint32 commandID = 1;
inline bool BasicCommand::has_commandid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicCommand::set_has_commandid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicCommand::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicCommand::clear_commandid() {
  commandid_ = 0u;
  clear_has_commandid();
}
inline ::google::protobuf::uint32 BasicCommand::commandid() const {
  // @@protoc_insertion_point(field_get:BasicCommand.commandID)
  return commandid_;
}
inline void BasicCommand::set_commandid(::google::protobuf::uint32 value) {
  set_has_commandid();
  commandid_ = value;
  // @@protoc_insertion_point(field_set:BasicCommand.commandID)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NackReasons> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NackReasons>() {
  return ::NackReasons_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Protocol_5fCommands_2eproto__INCLUDED
