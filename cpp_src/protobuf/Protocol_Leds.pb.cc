// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol_Leds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol_Leds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LedsConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LedsConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* LedBlink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LedBlink_reflection_ = NULL;
const ::google::protobuf::Descriptor* LedRgb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LedRgb_reflection_ = NULL;
const ::google::protobuf::Descriptor* LedsValues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LedsValues_reflection_ = NULL;
const ::google::protobuf::Descriptor* LedStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LedStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLedsStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLedsStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LedNumber_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LedState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LedStrength_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protocol_5fLeds_2eproto() {
  protobuf_AddDesc_Protocol_5fLeds_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protocol_Leds.proto");
  GOOGLE_CHECK(file != NULL);
  LedsConfig_descriptor_ = file->message_type(0);
  static const int LedsConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedsConfig, commandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedsConfig, pwm1dutycicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedsConfig, pwm2dutycicle_),
  };
  LedsConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LedsConfig_descriptor_,
      LedsConfig::default_instance_,
      LedsConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedsConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedsConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LedsConfig));
  LedBlink_descriptor_ = file->message_type(1);
  static const int LedBlink_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedBlink, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedBlink, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedBlink, timeon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedBlink, timeoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedBlink, numblinks_),
  };
  LedBlink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LedBlink_descriptor_,
      LedBlink::default_instance_,
      LedBlink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedBlink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedBlink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LedBlink));
  LedRgb_descriptor_ = file->message_type(2);
  static const int LedRgb_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedRgb, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedRgb, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedRgb, green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedRgb, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedRgb, blink_),
  };
  LedRgb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LedRgb_descriptor_,
      LedRgb::default_instance_,
      LedRgb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedRgb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedRgb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LedRgb));
  LedsValues_descriptor_ = file->message_type(3);
  static const int LedsValues_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedsValues, commandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedsValues, leds_),
  };
  LedsValues_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LedsValues_descriptor_,
      LedsValues::default_instance_,
      LedsValues_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedsValues, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedsValues, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LedsValues));
  LedStatusRequest_descriptor_ = file->message_type(4);
  static const int LedStatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedStatusRequest, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedStatusRequest, sendblink_),
  };
  LedStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LedStatusRequest_descriptor_,
      LedStatusRequest::default_instance_,
      LedStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LedStatusRequest));
  GetLedsStatus_descriptor_ = file->message_type(5);
  static const int GetLedsStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedsStatus, commandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedsStatus, leds_),
  };
  GetLedsStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLedsStatus_descriptor_,
      GetLedsStatus::default_instance_,
      GetLedsStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedsStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedsStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLedsStatus));
  LedNumber_descriptor_ = file->enum_type(0);
  LedState_descriptor_ = file->enum_type(1);
  LedStrength_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protocol_5fLeds_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LedsConfig_descriptor_, &LedsConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LedBlink_descriptor_, &LedBlink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LedRgb_descriptor_, &LedRgb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LedsValues_descriptor_, &LedsValues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LedStatusRequest_descriptor_, &LedStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLedsStatus_descriptor_, &GetLedsStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protocol_5fLeds_2eproto() {
  delete LedsConfig::default_instance_;
  delete LedsConfig_reflection_;
  delete LedBlink::default_instance_;
  delete LedBlink_reflection_;
  delete LedRgb::default_instance_;
  delete LedRgb_reflection_;
  delete LedsValues::default_instance_;
  delete LedsValues_reflection_;
  delete LedStatusRequest::default_instance_;
  delete LedStatusRequest_reflection_;
  delete GetLedsStatus::default_instance_;
  delete GetLedsStatus_reflection_;
}

void protobuf_AddDesc_Protocol_5fLeds_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023Protocol_Leds.proto\"M\n\nLedsConfig\022\021\n\tc"
    "ommandID\030\001 \002(\r\022\025\n\rpwm1DutyCicle\030\002 \002(\002\022\025\n"
    "\rpwm2DutyCicle\030\003 \002(\002\"h\n\010LedBlink\022\016\n\006enab"
    "le\030\001 \002(\010\022\030\n\005state\030\002 \001(\0162\t.LedState\022\016\n\006ti"
    "meOn\030\003 \001(\r\022\017\n\007timeOff\030\004 \001(\r\022\021\n\tnumBlinks"
    "\030\005 \001(\r\"\222\001\n\006LedRgb\022\032\n\006number\030\001 \002(\0162\n.LedN"
    "umber\022\031\n\003red\030\002 \002(\0162\014.LedStrength\022\033\n\005gree"
    "n\030\003 \002(\0162\014.LedStrength\022\032\n\004blue\030\004 \002(\0162\014.Le"
    "dStrength\022\030\n\005blink\030\005 \001(\0132\t.LedBlink\"6\n\nL"
    "edsValues\022\021\n\tcommandID\030\001 \002(\r\022\025\n\004leds\030\002 \003"
    "(\0132\007.LedRgb\"A\n\020LedStatusRequest\022\032\n\006numbe"
    "r\030\001 \002(\0162\n.LedNumber\022\021\n\tsendBlink\030\002 \001(\010\"C"
    "\n\rGetLedsStatus\022\021\n\tcommandID\030\001 \002(\r\022\037\n\004le"
    "ds\030\002 \003(\0132\021.LedStatusRequest*\302\002\n\tLedNumbe"
    "r\022\r\n\tLED_RGB_1\020\000\022\r\n\tLED_RGB_2\020\001\022\r\n\tLED_R"
    "GB_3\020\002\022\r\n\tLED_RGB_4\020\003\022\r\n\tLED_RGB_5\020\004\022\r\n\t"
    "LED_RGB_6\020\005\022\r\n\tLED_RGB_7\020\006\022\r\n\tLED_RGB_8\020"
    "\007\022\r\n\tLED_RGB_9\020\010\022\016\n\nLED_RGB_10\020\t\022\016\n\nLED_"
    "RGB_11\020\n\022\016\n\nLED_RGB_12\020\013\022\016\n\nLED_RGB_13\020\014"
    "\022\016\n\nLED_RGB_14\020\r\022\016\n\nLED_RGB_15\020\016\022\016\n\nLED_"
    "RGB_16\020\017\022\016\n\nLED_RGB_17\020\020\022\016\n\nLED_RGB_18\020\021"
    "\022\016\n\nLED_RGB_19\020\022\022\016\n\nLED_RGB_20\020\023*#\n\010LedS"
    "tate\022\013\n\007LED_OFF\020\000\022\n\n\006LED_ON\020\001*Q\n\013LedStre"
    "ngth\022\016\n\nSTRENGTH_0\020\000\022\017\n\013STRENGTH_25\020\001\022\017\n"
    "\013STRENGTH_50\020\002\022\020\n\014STRENGTH_100\020\003", 992);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol_Leds.proto", &protobuf_RegisterTypes);
  LedsConfig::default_instance_ = new LedsConfig();
  LedBlink::default_instance_ = new LedBlink();
  LedRgb::default_instance_ = new LedRgb();
  LedsValues::default_instance_ = new LedsValues();
  LedStatusRequest::default_instance_ = new LedStatusRequest();
  GetLedsStatus::default_instance_ = new GetLedsStatus();
  LedsConfig::default_instance_->InitAsDefaultInstance();
  LedBlink::default_instance_->InitAsDefaultInstance();
  LedRgb::default_instance_->InitAsDefaultInstance();
  LedsValues::default_instance_->InitAsDefaultInstance();
  LedStatusRequest::default_instance_->InitAsDefaultInstance();
  GetLedsStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_5fLeds_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_5fLeds_2eproto {
  StaticDescriptorInitializer_Protocol_5fLeds_2eproto() {
    protobuf_AddDesc_Protocol_5fLeds_2eproto();
  }
} static_descriptor_initializer_Protocol_5fLeds_2eproto_;
const ::google::protobuf::EnumDescriptor* LedNumber_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedNumber_descriptor_;
}
bool LedNumber_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LedState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedState_descriptor_;
}
bool LedState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LedStrength_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedStrength_descriptor_;
}
bool LedStrength_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LedsConfig::kCommandIDFieldNumber;
const int LedsConfig::kPwm1DutyCicleFieldNumber;
const int LedsConfig::kPwm2DutyCicleFieldNumber;
#endif  // !_MSC_VER

LedsConfig::LedsConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LedsConfig)
}

void LedsConfig::InitAsDefaultInstance() {
}

LedsConfig::LedsConfig(const LedsConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LedsConfig)
}

void LedsConfig::SharedCtor() {
  _cached_size_ = 0;
  commandid_ = 0u;
  pwm1dutycicle_ = 0;
  pwm2dutycicle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LedsConfig::~LedsConfig() {
  // @@protoc_insertion_point(destructor:LedsConfig)
  SharedDtor();
}

void LedsConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LedsConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LedsConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedsConfig_descriptor_;
}

const LedsConfig& LedsConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_5fLeds_2eproto();
  return *default_instance_;
}

LedsConfig* LedsConfig::default_instance_ = NULL;

LedsConfig* LedsConfig::New() const {
  return new LedsConfig;
}

void LedsConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LedsConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(commandid_, pwm2dutycicle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LedsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LedsConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 commandID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commandid_)));
          set_has_commandid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_pwm1DutyCicle;
        break;
      }

      // required float pwm1DutyCicle = 2;
      case 2: {
        if (tag == 21) {
         parse_pwm1DutyCicle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pwm1dutycicle_)));
          set_has_pwm1dutycicle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_pwm2DutyCicle;
        break;
      }

      // required float pwm2DutyCicle = 3;
      case 3: {
        if (tag == 29) {
         parse_pwm2DutyCicle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pwm2dutycicle_)));
          set_has_pwm2dutycicle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LedsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LedsConfig)
  return false;
#undef DO_
}

void LedsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LedsConfig)
  // required uint32 commandID = 1;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->commandid(), output);
  }

  // required float pwm1DutyCicle = 2;
  if (has_pwm1dutycicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pwm1dutycicle(), output);
  }

  // required float pwm2DutyCicle = 3;
  if (has_pwm2dutycicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pwm2dutycicle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LedsConfig)
}

::google::protobuf::uint8* LedsConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LedsConfig)
  // required uint32 commandID = 1;
  if (has_commandid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->commandid(), target);
  }

  // required float pwm1DutyCicle = 2;
  if (has_pwm1dutycicle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pwm1dutycicle(), target);
  }

  // required float pwm2DutyCicle = 3;
  if (has_pwm2dutycicle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pwm2dutycicle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LedsConfig)
  return target;
}

int LedsConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 commandID = 1;
    if (has_commandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commandid());
    }

    // required float pwm1DutyCicle = 2;
    if (has_pwm1dutycicle()) {
      total_size += 1 + 4;
    }

    // required float pwm2DutyCicle = 3;
    if (has_pwm2dutycicle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LedsConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LedsConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LedsConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LedsConfig::MergeFrom(const LedsConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandid()) {
      set_commandid(from.commandid());
    }
    if (from.has_pwm1dutycicle()) {
      set_pwm1dutycicle(from.pwm1dutycicle());
    }
    if (from.has_pwm2dutycicle()) {
      set_pwm2dutycicle(from.pwm2dutycicle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LedsConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedsConfig::CopyFrom(const LedsConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedsConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LedsConfig::Swap(LedsConfig* other) {
  if (other != this) {
    std::swap(commandid_, other->commandid_);
    std::swap(pwm1dutycicle_, other->pwm1dutycicle_);
    std::swap(pwm2dutycicle_, other->pwm2dutycicle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LedsConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LedsConfig_descriptor_;
  metadata.reflection = LedsConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LedBlink::kEnableFieldNumber;
const int LedBlink::kStateFieldNumber;
const int LedBlink::kTimeOnFieldNumber;
const int LedBlink::kTimeOffFieldNumber;
const int LedBlink::kNumBlinksFieldNumber;
#endif  // !_MSC_VER

LedBlink::LedBlink()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LedBlink)
}

void LedBlink::InitAsDefaultInstance() {
}

LedBlink::LedBlink(const LedBlink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LedBlink)
}

void LedBlink::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  state_ = 0;
  timeon_ = 0u;
  timeoff_ = 0u;
  numblinks_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LedBlink::~LedBlink() {
  // @@protoc_insertion_point(destructor:LedBlink)
  SharedDtor();
}

void LedBlink::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LedBlink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LedBlink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedBlink_descriptor_;
}

const LedBlink& LedBlink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_5fLeds_2eproto();
  return *default_instance_;
}

LedBlink* LedBlink::default_instance_ = NULL;

LedBlink* LedBlink::New() const {
  return new LedBlink;
}

void LedBlink::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LedBlink*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(enable_, numblinks_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LedBlink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LedBlink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .LedState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LedState_IsValid(value)) {
            set_state(static_cast< ::LedState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timeOn;
        break;
      }

      // optional uint32 timeOn = 3;
      case 3: {
        if (tag == 24) {
         parse_timeOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeon_)));
          set_has_timeon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeOff;
        break;
      }

      // optional uint32 timeOff = 4;
      case 4: {
        if (tag == 32) {
         parse_timeOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeoff_)));
          set_has_timeoff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_numBlinks;
        break;
      }

      // optional uint32 numBlinks = 5;
      case 5: {
        if (tag == 40) {
         parse_numBlinks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numblinks_)));
          set_has_numblinks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LedBlink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LedBlink)
  return false;
#undef DO_
}

void LedBlink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LedBlink)
  // required bool enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // optional .LedState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint32 timeOn = 3;
  if (has_timeon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timeon(), output);
  }

  // optional uint32 timeOff = 4;
  if (has_timeoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeoff(), output);
  }

  // optional uint32 numBlinks = 5;
  if (has_numblinks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numblinks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LedBlink)
}

::google::protobuf::uint8* LedBlink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LedBlink)
  // required bool enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // optional .LedState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint32 timeOn = 3;
  if (has_timeon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeon(), target);
  }

  // optional uint32 timeOff = 4;
  if (has_timeoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeoff(), target);
  }

  // optional uint32 numBlinks = 5;
  if (has_numblinks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->numblinks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LedBlink)
  return target;
}

int LedBlink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enable = 1;
    if (has_enable()) {
      total_size += 1 + 1;
    }

    // optional .LedState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 timeOn = 3;
    if (has_timeon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeon());
    }

    // optional uint32 timeOff = 4;
    if (has_timeoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeoff());
    }

    // optional uint32 numBlinks = 5;
    if (has_numblinks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numblinks());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LedBlink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LedBlink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LedBlink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LedBlink::MergeFrom(const LedBlink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timeon()) {
      set_timeon(from.timeon());
    }
    if (from.has_timeoff()) {
      set_timeoff(from.timeoff());
    }
    if (from.has_numblinks()) {
      set_numblinks(from.numblinks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LedBlink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedBlink::CopyFrom(const LedBlink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedBlink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LedBlink::Swap(LedBlink* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(state_, other->state_);
    std::swap(timeon_, other->timeon_);
    std::swap(timeoff_, other->timeoff_);
    std::swap(numblinks_, other->numblinks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LedBlink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LedBlink_descriptor_;
  metadata.reflection = LedBlink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LedRgb::kNumberFieldNumber;
const int LedRgb::kRedFieldNumber;
const int LedRgb::kGreenFieldNumber;
const int LedRgb::kBlueFieldNumber;
const int LedRgb::kBlinkFieldNumber;
#endif  // !_MSC_VER

LedRgb::LedRgb()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LedRgb)
}

void LedRgb::InitAsDefaultInstance() {
  blink_ = const_cast< ::LedBlink*>(&::LedBlink::default_instance());
}

LedRgb::LedRgb(const LedRgb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LedRgb)
}

void LedRgb::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  red_ = 0;
  green_ = 0;
  blue_ = 0;
  blink_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LedRgb::~LedRgb() {
  // @@protoc_insertion_point(destructor:LedRgb)
  SharedDtor();
}

void LedRgb::SharedDtor() {
  if (this != default_instance_) {
    delete blink_;
  }
}

void LedRgb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LedRgb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedRgb_descriptor_;
}

const LedRgb& LedRgb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_5fLeds_2eproto();
  return *default_instance_;
}

LedRgb* LedRgb::default_instance_ = NULL;

LedRgb* LedRgb::New() const {
  return new LedRgb;
}

void LedRgb::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LedRgb*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(number_, blue_);
    if (has_blink()) {
      if (blink_ != NULL) blink_->::LedBlink::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LedRgb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LedRgb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LedNumber number = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LedNumber_IsValid(value)) {
            set_number(static_cast< ::LedNumber >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_red;
        break;
      }

      // required .LedStrength red = 2;
      case 2: {
        if (tag == 16) {
         parse_red:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LedStrength_IsValid(value)) {
            set_red(static_cast< ::LedStrength >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_green;
        break;
      }

      // required .LedStrength green = 3;
      case 3: {
        if (tag == 24) {
         parse_green:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LedStrength_IsValid(value)) {
            set_green(static_cast< ::LedStrength >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blue;
        break;
      }

      // required .LedStrength blue = 4;
      case 4: {
        if (tag == 32) {
         parse_blue:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LedStrength_IsValid(value)) {
            set_blue(static_cast< ::LedStrength >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_blink;
        break;
      }

      // optional .LedBlink blink = 5;
      case 5: {
        if (tag == 42) {
         parse_blink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blink()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LedRgb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LedRgb)
  return false;
#undef DO_
}

void LedRgb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LedRgb)
  // required .LedNumber number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->number(), output);
  }

  // required .LedStrength red = 2;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->red(), output);
  }

  // required .LedStrength green = 3;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->green(), output);
  }

  // required .LedStrength blue = 4;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->blue(), output);
  }

  // optional .LedBlink blink = 5;
  if (has_blink()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->blink(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LedRgb)
}

::google::protobuf::uint8* LedRgb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LedRgb)
  // required .LedNumber number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->number(), target);
  }

  // required .LedStrength red = 2;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->red(), target);
  }

  // required .LedStrength green = 3;
  if (has_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->green(), target);
  }

  // required .LedStrength blue = 4;
  if (has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->blue(), target);
  }

  // optional .LedBlink blink = 5;
  if (has_blink()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->blink(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LedRgb)
  return target;
}

int LedRgb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LedNumber number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->number());
    }

    // required .LedStrength red = 2;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->red());
    }

    // required .LedStrength green = 3;
    if (has_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->green());
    }

    // required .LedStrength blue = 4;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blue());
    }

    // optional .LedBlink blink = 5;
    if (has_blink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blink());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LedRgb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LedRgb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LedRgb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LedRgb::MergeFrom(const LedRgb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
    if (from.has_blink()) {
      mutable_blink()->::LedBlink::MergeFrom(from.blink());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LedRgb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedRgb::CopyFrom(const LedRgb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedRgb::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_blink()) {
    if (!this->blink().IsInitialized()) return false;
  }
  return true;
}

void LedRgb::Swap(LedRgb* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(red_, other->red_);
    std::swap(green_, other->green_);
    std::swap(blue_, other->blue_);
    std::swap(blink_, other->blink_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LedRgb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LedRgb_descriptor_;
  metadata.reflection = LedRgb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LedsValues::kCommandIDFieldNumber;
const int LedsValues::kLedsFieldNumber;
#endif  // !_MSC_VER

LedsValues::LedsValues()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LedsValues)
}

void LedsValues::InitAsDefaultInstance() {
}

LedsValues::LedsValues(const LedsValues& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LedsValues)
}

void LedsValues::SharedCtor() {
  _cached_size_ = 0;
  commandid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LedsValues::~LedsValues() {
  // @@protoc_insertion_point(destructor:LedsValues)
  SharedDtor();
}

void LedsValues::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LedsValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LedsValues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedsValues_descriptor_;
}

const LedsValues& LedsValues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_5fLeds_2eproto();
  return *default_instance_;
}

LedsValues* LedsValues::default_instance_ = NULL;

LedsValues* LedsValues::New() const {
  return new LedsValues;
}

void LedsValues::Clear() {
  commandid_ = 0u;
  leds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LedsValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LedsValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 commandID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commandid_)));
          set_has_commandid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leds;
        break;
      }

      // repeated .LedRgb leds = 2;
      case 2: {
        if (tag == 18) {
         parse_leds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LedsValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LedsValues)
  return false;
#undef DO_
}

void LedsValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LedsValues)
  // required uint32 commandID = 1;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->commandid(), output);
  }

  // repeated .LedRgb leds = 2;
  for (int i = 0; i < this->leds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LedsValues)
}

::google::protobuf::uint8* LedsValues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LedsValues)
  // required uint32 commandID = 1;
  if (has_commandid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->commandid(), target);
  }

  // repeated .LedRgb leds = 2;
  for (int i = 0; i < this->leds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LedsValues)
  return target;
}

int LedsValues::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 commandID = 1;
    if (has_commandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commandid());
    }

  }
  // repeated .LedRgb leds = 2;
  total_size += 1 * this->leds_size();
  for (int i = 0; i < this->leds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LedsValues::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LedsValues* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LedsValues*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LedsValues::MergeFrom(const LedsValues& from) {
  GOOGLE_CHECK_NE(&from, this);
  leds_.MergeFrom(from.leds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandid()) {
      set_commandid(from.commandid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LedsValues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedsValues::CopyFrom(const LedsValues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedsValues::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->leds())) return false;
  return true;
}

void LedsValues::Swap(LedsValues* other) {
  if (other != this) {
    std::swap(commandid_, other->commandid_);
    leds_.Swap(&other->leds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LedsValues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LedsValues_descriptor_;
  metadata.reflection = LedsValues_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LedStatusRequest::kNumberFieldNumber;
const int LedStatusRequest::kSendBlinkFieldNumber;
#endif  // !_MSC_VER

LedStatusRequest::LedStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LedStatusRequest)
}

void LedStatusRequest::InitAsDefaultInstance() {
}

LedStatusRequest::LedStatusRequest(const LedStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LedStatusRequest)
}

void LedStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  sendblink_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LedStatusRequest::~LedStatusRequest() {
  // @@protoc_insertion_point(destructor:LedStatusRequest)
  SharedDtor();
}

void LedStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LedStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LedStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedStatusRequest_descriptor_;
}

const LedStatusRequest& LedStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_5fLeds_2eproto();
  return *default_instance_;
}

LedStatusRequest* LedStatusRequest::default_instance_ = NULL;

LedStatusRequest* LedStatusRequest::New() const {
  return new LedStatusRequest;
}

void LedStatusRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LedStatusRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(number_, sendblink_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LedStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LedStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LedNumber number = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LedNumber_IsValid(value)) {
            set_number(static_cast< ::LedNumber >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sendBlink;
        break;
      }

      // optional bool sendBlink = 2;
      case 2: {
        if (tag == 16) {
         parse_sendBlink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sendblink_)));
          set_has_sendblink();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LedStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LedStatusRequest)
  return false;
#undef DO_
}

void LedStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LedStatusRequest)
  // required .LedNumber number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->number(), output);
  }

  // optional bool sendBlink = 2;
  if (has_sendblink()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sendblink(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LedStatusRequest)
}

::google::protobuf::uint8* LedStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LedStatusRequest)
  // required .LedNumber number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->number(), target);
  }

  // optional bool sendBlink = 2;
  if (has_sendblink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sendblink(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LedStatusRequest)
  return target;
}

int LedStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LedNumber number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->number());
    }

    // optional bool sendBlink = 2;
    if (has_sendblink()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LedStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LedStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LedStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LedStatusRequest::MergeFrom(const LedStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_sendblink()) {
      set_sendblink(from.sendblink());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LedStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedStatusRequest::CopyFrom(const LedStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LedStatusRequest::Swap(LedStatusRequest* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(sendblink_, other->sendblink_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LedStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LedStatusRequest_descriptor_;
  metadata.reflection = LedStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLedsStatus::kCommandIDFieldNumber;
const int GetLedsStatus::kLedsFieldNumber;
#endif  // !_MSC_VER

GetLedsStatus::GetLedsStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetLedsStatus)
}

void GetLedsStatus::InitAsDefaultInstance() {
}

GetLedsStatus::GetLedsStatus(const GetLedsStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetLedsStatus)
}

void GetLedsStatus::SharedCtor() {
  _cached_size_ = 0;
  commandid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLedsStatus::~GetLedsStatus() {
  // @@protoc_insertion_point(destructor:GetLedsStatus)
  SharedDtor();
}

void GetLedsStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLedsStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLedsStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLedsStatus_descriptor_;
}

const GetLedsStatus& GetLedsStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_5fLeds_2eproto();
  return *default_instance_;
}

GetLedsStatus* GetLedsStatus::default_instance_ = NULL;

GetLedsStatus* GetLedsStatus::New() const {
  return new GetLedsStatus;
}

void GetLedsStatus::Clear() {
  commandid_ = 0u;
  leds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLedsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetLedsStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 commandID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commandid_)));
          set_has_commandid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leds;
        break;
      }

      // repeated .LedStatusRequest leds = 2;
      case 2: {
        if (tag == 18) {
         parse_leds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetLedsStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetLedsStatus)
  return false;
#undef DO_
}

void GetLedsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetLedsStatus)
  // required uint32 commandID = 1;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->commandid(), output);
  }

  // repeated .LedStatusRequest leds = 2;
  for (int i = 0; i < this->leds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetLedsStatus)
}

::google::protobuf::uint8* GetLedsStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetLedsStatus)
  // required uint32 commandID = 1;
  if (has_commandid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->commandid(), target);
  }

  // repeated .LedStatusRequest leds = 2;
  for (int i = 0; i < this->leds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetLedsStatus)
  return target;
}

int GetLedsStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 commandID = 1;
    if (has_commandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commandid());
    }

  }
  // repeated .LedStatusRequest leds = 2;
  total_size += 1 * this->leds_size();
  for (int i = 0; i < this->leds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLedsStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLedsStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLedsStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLedsStatus::MergeFrom(const GetLedsStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  leds_.MergeFrom(from.leds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandid()) {
      set_commandid(from.commandid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLedsStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLedsStatus::CopyFrom(const GetLedsStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedsStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->leds())) return false;
  return true;
}

void GetLedsStatus::Swap(GetLedsStatus* other) {
  if (other != this) {
    std::swap(commandid_, other->commandid_);
    leds_.Swap(&other->leds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLedsStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLedsStatus_descriptor_;
  metadata.reflection = GetLedsStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
